---
description: 
globs: 
alwaysApply: false
---
# macOS Accessibility (`ax`) Binary Rules & Knowledge

This document outlines the functionality, build process, testing procedures, and technical details of the `ax` Swift command-line utility, designed for interacting with the macOS Accessibility framework.

## 1. `ax` Binary Overview

*   **Purpose**: Provides a JSON-based interface to query UI elements and perform actions using the macOS Accessibility API. It's intended to be called by other processes (like the MCP server). The core logic is wrapped in a Swift-idiomatic `AXElement` struct.
*   **Communication**: Operates by reading JSON commands from `stdin` and writing JSON responses (or errors) to `stdout` (or `stderr` for errors).
*   **Core Commands (as per `CommandEnvelope` in `AXModels.swift`)**:
    *   `query`: Retrieves information about UI elements.
    *   `collectall`: Retrieves information about all UI elements matching criteria.
    *   `perform`: Executes an action on a UI element.
    *   `extracttext`: Extracts textual content from UI element(s).
*   **Key Input Fields (JSON - see `CommandEnvelope` in `AXModels.swift`)**:
    *   `command_id` (string): A unique identifier for the command, echoed in the response.
    *   `command` (string): "query", "collectall", "perform", or "extracttext".
    *   `application` (string, optional): Bundle ID or localized name of the target application (e.g., "com.apple.TextEdit", "Safari"). Defaults to the currently focused application if omitted.
    *   `locator` (object, optional - see `Locator` in `AXModels.swift`): Specifies the target element(s).
        *   `criteria` (object): Key-value pairs of attributes to match (e.g., `{"AXRole": "AXWindow", "AXMain":"true"}`). Values are typically strings.
        *   `root_element_path_hint` (array of strings, optional): A pathHint to find a container element from which the locator criteria will be applied.
        *   `requireAction` (string, optional): Filters results to elements supporting a specific action.
    *   `action` (string, optional): For `perform` command, the action to execute (e.g., "AXPress", "AXSetValue").
    *   `value` (string, optional): For `perform` command with actions like "AXSetValue", this is the value to set.
    *   `attributes` (array of strings, optional): For `query` and `collectall`, specific attributes to retrieve. Defaults to a common set if omitted.
    *   `path_hint` (array of strings, optional): A path to navigate the UI tree (e.g., `["window[1]", "toolbar[1]"]`) to find the primary target element or a base for the locator.
    *   `debug_logging` (boolean, optional): If `true`, includes detailed internal debug logs in the response.
    *   `max_elements` (int, optional): For `collectall`, the maximum number of elements to return. Also used as max depth in some search operations.
    *   `output_format` (string, optional): For attribute retrieval, can be "smart", "verbose", "text_content".
*   **Key Output Fields (JSON - see response structs in `AXModels.swift`)**:
    *   `QueryResponse`: Contains `command_id`, `attributes` (an `ElementAttributes` dictionary), `error` (optional), and `debug_logs` (optional).
    *   `MultiQueryResponse`: Contains `command_id`, `elements` (array of `ElementAttributes`), `count`, `error` (optional), and `debug_logs` (optional).
    *   `PerformResponse`: Contains `command_id`, `success` (boolean), `error` (optional), and `debug_logs` (optional).
    *   `TextContentResponse`: Contains `command_id`, `text_content` (string, optional), `error` (optional), and `debug_logs` (optional).
    *   `ErrorResponse`: Contains `command_id`, `error` (string), and `debug_logs` (optional).

## 2. Functionality - How it Works

The `ax` binary is implemented in Swift, with `main.swift` in `ax/Sources/AXHelper/` as the entry point. Core accessibility interactions are now primarily managed through the `AXElement` struct (`AXElement.swift`), which wraps `AXUIElement`. Most functions interacting with UI elements are marked `@MainActor`.

*   **Application Targeting**:
    *   The global `applicationElement(for: String)` function (in `AXElement.swift`) is used:
        *   It uses `pid(forAppIdentifier:)` (in `AXUtils.swift`) which tries `NSRunningApplication.runningApplications(withBundleIdentifier:)`, then `NSWorkspace.shared.runningApplications` matching `localizedName`.
        *   Once the `pid_t` is found, `AXUIElementCreateApplication(pid)` gets the root `AXUIElement`, which is then wrapped in an `AXElement`.
    *   `systemWideElement()` (in `AXElement.swift`) provides the system-wide accessibility object.

*   **Element Location (`AXSearch.swift`, `AXUtils.swift`, `AXElement.swift`)**:
    *   **`search(axElement:locator:requireAction:maxDepth:isDebugLoggingEnabled:)`**:
        *   Takes an `AXElement` as its starting point.
        *   Performs a depth-first search.
        *   Uses `attributesMatch(axElement:matchDetails:depth:isDebugLoggingEnabled:)` (in `AXAttributeMatcher.swift`) for criteria matching. `attributesMatch` uses `axElement.rawAttributeValue(named:)` and handles various `CFTypeRef` comparisons.
        *   Checks for `requireAction` using `axElement.isActionSupported()`.
        *   Recursively searches children obtained via `axElement.children`.
    *   **`collectAll(...)`**:
        *   Traverses the accessibility tree starting from a given `AXElement`.
        *   Uses `attributesMatch` for criteria and `axElement.isActionSupported` for `requireAction`.
        *   Aggregates matching `AXElement`s.
        *   Relies on `axElement.children` for comprehensive child discovery. `AXElement.children` itself queries multiple attributes (`kAXChildrenAttribute`, `kAXVisibleChildrenAttribute`, "AXWebAreaChildren", `kAXWindowsAttribute` for app elements, etc.) and handles deduplication.
    *   **`navigateToElement(from:pathHint:)` (in `AXUtils.swift`)**:
        *   Takes and returns `AXElement`.
        *   Processes `pathHint` (e.g., `["window[1]", "toolbar[1]"]`).
        *   Navigates using `axElement.windows` or `axElement.children` based on role and index.

*   **Attribute Retrieval (`AXAttributeHelpers.swift`)**:
    *   `getElementAttributes(axElement:requestedAttributes:outputFormat:)`:
        *   Takes an `AXElement`.
        *   If `requestedAttributes` is empty, discovers all via `AXUIElementCopyAttributeNames` on `axElement.underlyingElement`.
        *   Retrieves values using `axElement.attribute<T>()`, direct `AXElement` computed properties (e.g., `axElement.role`, `axElement.title`, `axElement.pathHint`), or `axElement.rawAttributeValue(named:)` for complex/raw types.
        *   Handles `AXValue` types (like position/size) by calling `AXValueUnwrapper.unwrap` (from `AXValueHelpers.swift`) and then processing known structures.
        *   `AXValueUnwrapper.unwrap` handles conversion of various `CFTypeRef` (like `CFString`, `CFNumber`, `CFBoolean`, `AXValue`, `AXUIElement`) into Swift types.
        *   Includes `ComputedName` (derived from title, value, description, etc.) and `IsClickable` (boolean, based on role or `kAXPressAction` support).

*   **Action Performing (`AXElement.swift`, `AXCommands.swift`)**:
    *   `AXElement.isActionSupported(_ actionName: String)`: Checks if an action is supported, primarily by querying `kAXActionNamesAttribute`.
    *   `AXElement.performAction(_ actionName: String)`: Calls `AXUIElementPerformAction`.
    *   The `handlePerform` command in `AXCommands.swift` uses these `AXElement` methods. For "AXSetValue", it uses `AXUIElementSetAttributeValue` directly with `kAXValueAttribute`.

*   **Text Extraction (`AXUtils.swift`, `AXCommands.swift`)**:
    *   `extractTextContent(axElement: AXElement)`: Iterates through a list of textual attributes (e.g., `kAXValueAttribute`, `kAXTitleAttribute`, `kAXDescriptionAttribute`) on the `AXElement`, concatenates unique non-empty values.
    *   `handleExtractText` uses this after finding element(s) via `path_hint` or `locator` (using `collectAll`).

*   **Error Handling (`AXUtils.swift`)**:
    *   Uses a custom `AXErrorString` Swift enum (`.notAuthorised`, `.elementNotFound`, `.actionFailed`, etc.).
    *   Responds with a JSON `ErrorResponse` object.

*   **Threading**:
    *   Many functions that interact with `AXUIElement` (especially attribute getting/setting and action performing) are marked with `@MainActor` to ensure they run on the main thread, as required by the Accessibility APIs. This includes most methods within `AXElement` and the command handlers in `AXCommands.swift`.

*   **Debugging (`AXLogging.swift`)**:
    *   `GLOBAL_DEBUG_ENABLED` (Swift constant): If true, `debug()` messages are printed to `stderr`.
    *   `debug_logging` field in input JSON: If `true`, enables `commandSpecificDebugLoggingEnabled` for the current command.
    *   `collectedDebugLogs` (Swift array): Stores debug messages if `commandSpecificDebugLoggingEnabled` is true. This array is included in the `debug_logs` field of the JSON response.
    *   `resetDebugLogContextForNewCommand()`: Called for each command to reset logging state.

## 3. Build Process & Optimization

The `ax` binary is built using Swift Package Manager, with build configurations potentially managed by a `Makefile`.

*   **`Package.swift`**:
    *   Defines the "ax" executable product and target.
    *   Specifies `.macOS(.v13)` platform.
    *   Explicitly lists all source files in `Sources/AXHelper`.
*   **`Makefile` (`ax/Makefile`)** (if used for final release builds):
    *   **Universal Binary**: Can be configured to build for `arm64` and `x86_64`.
    *   **Optimization Flags**: May use `-Xswiftc -Osize` and `-Xlinker -Wl,-dead_strip`.
    *   **Symbol Stripping**: May use `strip -x` on the final universal binary.
    *   **Output**: The final binary is typically placed at `ax/ax` or in `.build/debug/ax` or `.build/release/ax`.
*   **Optimization Summary**:
    *   Size optimization and dead code stripping are primary goals for release builds.
    *   UPX was explored but abandoned due to creating malformed binaries.

## 4. Running & Testing

The `ax` binary can be invoked by a parent process or tested manually.

*   **Runner Script (`ax/ax_runner.sh`)**:
    *   Recommended for manual execution. Robustly executes `ax/ax` from its location.
    *   Example:
        ```bash
        #!/bin/bash
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
        exec "$SCRIPT_DIR/ax" "$@"
        ```
*   **Manual Testing**:
    1.  **Verify Target Application State**: Ensure the app is running and in the expected UI state.
    2.  **Construct JSON Input**: Single line of JSON.
    3.  **Execute**: Pipe JSON to `./ax/ax_runner.sh` (or the direct path to the `ax` binary, e.g., `ax/.build/debug/ax`).
        *   Example:
            ```bash
            echo '{"command_id":"test01","command":"query","application":"com.apple.TextEdit","locator":{"criteria":{"AXRole":"AXWindow","AXMain":"true"}},"debug_logging":true}' | ./ax/ax_runner.sh
            ```
    4.  **Interpret Output**: `stdout` for JSON response, `stderr` for `ErrorResponse` or global debug messages.

*   **Permissions**: The executing process **must** have "Accessibility" permissions in "System Settings > Privacy & Security > Accessibility". `ax` calls `checkAccessibilityPermissions()` (in `AXUtils.swift`) on startup.

## 5. macOS Accessibility (AX) Intricacies & Swift Integration

*   **Frameworks**: `ApplicationServices` (for C APIs), `AppKit` (for `NSRunningApplication`).
*   **`AXElement` Wrapper**: Provides a more Swift-idiomatic interface over `AXUIElement`.
*   **Attributes & `CFTypeRef`**: Values are `CFTypeRef`. Handled by `AXValueUnwrapper.unwrap` and `axValue<T>` in `AXValueHelpers.swift`, and direct `AXElement` properties.
*   **`AXValue`**: Special type for geometry, ranges, etc., unwrapped via `AXValueUnwrapper`.
*   **Actions**: Performed via `AXElement.performAction()`. Support checked with `AXElement.isActionSupported()`.
*   **Roles**: `AXRole` (e.g., "AXWindow", "AXButton", "AXTextField") is key for identification.
*   **Constants**: Defined in `AXConstants.swift`.
*   **Tooling**: **Accessibility Inspector** (Xcode > Open Developer Tool) is vital.

This document reflects the state of the `ax` tool after significant refactoring towards a more Swift-idiomatic design using `AXElement`.
